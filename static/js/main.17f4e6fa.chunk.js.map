{"version":3,"sources":["App.js","components/Button.jsx","components/Input.jsx","serviceWorker.js","index.js"],"names":["App","initialCount","localStorage","getItem","useState","count","setCount","useEffect","setItem","window","addEventListener","e","newValue","className","onClick","Button","this","props","action","title","Component","Input","value","setValue","type","onChange","target","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","exact","path","component","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2MAuBeA,MApBf,WACE,IAAMC,GAAgBC,aAAaC,QAAQ,iBAAmB,EAC9D,EAA0BC,mBAASH,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KASA,OAHAC,qBAAU,kBAAML,aAAaM,QAAQ,eAAgBH,MACrDI,OAAOC,iBAAiB,WAAU,SAAAC,GAAC,OAAIL,GAAUK,EAAEC,aAGjD,qBAAKC,UAAU,MAAMC,QARA,WACrBR,EAASD,EAAM,IAOf,SACI,qBAAKQ,UAAU,QAAf,SACGR,O,gCCdUU,E,4JACnB,WACE,OAAO,wBAAQF,UAAU,SAASC,QAASE,KAAKC,MAAMC,OAA/C,SAAwDF,KAAKC,MAAME,Y,GAF1CC,aCgBrBC,EAfD,SAACJ,GACX,MAA0Bb,mBAASa,EAAMK,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KAMA,OACI,sBAAKV,UAAU,gBAAf,UACI,uBAAOA,UAAU,QAAQW,KAAK,SAASF,MAAOA,EAAOG,SAAU,SAACd,GAAD,OAAOY,EAASZ,EAAEe,OAAOJ,UACxF,cAAC,EAAD,CAAQJ,OAPQ,WACpBhB,aAAaM,QAAQ,eAAgBc,IAMAH,MAAO,+D,eCF9CQ,EAAcC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OACL,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxD,IACjC,cAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,OAAOC,UAAWnC,OAEvCoC,SAASC,eAAe,SDUtB,SAAkBxB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIwB,IAAIC,IAAwBnD,OAAOoB,SAASgC,MACpDC,SAAWrD,OAAOoB,SAASiC,OAIvC,OAGFrD,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMuB,EAAK,UAAM2B,IAAN,sBAEPjC,IAgEV,SAAiCM,EAAOC,GAEtC6B,MAAM9B,GACHK,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ClC,UAAUC,cAAckC,MAAMhC,MAAK,SAAAC,GACjCA,EAAagC,aAAajC,MAAK,WAC7B7B,OAAOoB,SAAS2C,eAKpBxC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFA0B,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAMhC,MAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.17f4e6fa.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./assets/css/style.css\";\n\nfunction App(){\n  const initialCount = +localStorage.getItem('storageCount') || 0;\n  const [count, setCount] = useState(initialCount);\n\n  const incrementCount = () => {\n    setCount(count+1);\n  };\n\n  useEffect(() => localStorage.setItem('storageCount', count));\n  window.addEventListener('storage',e => setCount(+e.newValue))\n\n  return (\n    <div className=\"app\" onClick={incrementCount}>\n        <div className=\"count\">\n          {count}\n        </div>\n    </div>\n  )\n}\n\nexport default App;","import React, { Component } from \"react\";\nimport \"../assets/css/style.css\";\n\nexport default class Button extends Component {\n  render() {\n    return <button className=\"button\" onClick={this.props.action}>{this.props.title}</button>;\n  }\n}\n","import React, {useState} from 'react';\r\nimport Button from './Button';\r\nimport \"../assets/css/style.css\";\r\n\r\nconst Input = (props) => {\r\n    const [value, setValue] = useState(props.value);\r\n\r\n    const setStorageCount = () => {\r\n        localStorage.setItem('storageCount', value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"input_wrapper\">\r\n            <input className=\"input\" type=\"number\" value={value} onChange={(e) => setValue(e.target.value)}/>\r\n            <Button action={setStorageCount} title={\"Применить\"} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport Input from \"./components/Input\"\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render((\n    <Router>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/set\" component={Input} />\n    </Router>\n  ), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}